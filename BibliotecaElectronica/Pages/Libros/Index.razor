
@page "/"


<h3>Bienvenido a Red Library</h3>
<h2>Una app para mantener la cuenta de tus libros!</h2>

<div class="mb-2">
    <button class="btn btn-primary" @onclick="()=>{ShowForm = !ShowForm;}">
        <i class="bi bi-plus"></i> Añadir Libro
    </button>
</div>
<div>
    <label><b>Cantidad de libros:</b> @Libros.Count</label>
</div>


@if(ShowForm)
{
  
        <EditForm Model="request" OnValidSubmit="Send">

        <div class="modal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Añadir Un Libro</h5>
                         <button type="button" class="btn-close" @onclick="Cancelar" data-bs-dismiss="modal" aria-label="Close">
                             <span>&times;</span>
                         </button>
             
                    </div>
                    <div class="modal-body">
                        <div class="mb-3 input-group">
                            <label class="input-group-text">Nombre del libro</label>
                            <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
                        </div>
                        <div class="mb-3 input-group">
                            <label class="input-group-text">Autor del libro</label>
                            <InputText class="form-control" @bind-Value="@request.Autor"></InputText>
                        </div>
                        <div class="mb-3 input-group">
                            <label class="input-group-text">Género del libro</label>
                            <InputText class="form-control" @bind-Value="@request.Genero"></InputText>
                        </div>
                        <div class="mb-3 input-group">
                            <label class="input-group-text">Portada del libro</label>
                            <InputFile OnChange="HandleFileChange" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit"  class="btn btn-primary"">Guardar</button>
                        <button type="button" class="btn btn-primary " @onclick="Cancelar">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        </EditForm>
  
}

<div class="row">
    @foreach (var libro in Libros)
    {
            <div class="col-md-4">
                <div class="card mb-3">
                    <img class="card-img-top" src="data:image;base64,@Convert.ToBase64String(libro.Portada)" alt="Card image cap" style="max-width: 100%; max-height: 400px;">
                    <div class="card-body">
                        <h5 class="card-title">@libro.Nombre</h5>
                        <p class="card-text"><b>Escrito por:</b> @libro.Autor</p>
                        <p class="card-text"><small class="text-muted"><b>Género literario:</b> @libro.Genero</small></p>
                    </div>
                    <div class="card-footer d-flex justify-content-between">
                        <button class="btn btn-link text-muted" @onclick="()=>Seleccionar(libro.Id)">Editar</button>
                        <button class="btn btn-link text-muted" @onclick="()=>Eliminar(libro)">Borrar</button>
                    </div>
                </div>
            </div>
    }
</div>


@code {

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        request.Portada = buffer;
    }

    //Para mostrar el formulario de eliminar
    public bool ShowForm { get; set; } = false;
    //Creamos una lista con todos los contactos

    public List<LibroResponse> Libros { get; set; } = new List<LibroResponse>();

    //Creamos una variable de tipo LibroRequest para crear peticiones para almacenar libros
    public LibroRequest request { get; set; } = new LibroRequest();

    //creamos una variable de filtro
    public string Filtro { get; set; } = "";

    //para que se cierre el formulario de añadir
    void Cancelar()
    {
        request = new LibroRequest();
        ShowForm = false;
    }

    //funcion para cargar los contactos de manera asincrona(independiente)
    async Task CargarContactos()
    {
        //ejecutamos la funcion Consultar la cual devuelve una lista de ContactosResponse
        var resultado =  await libroServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Libros = resultado.Data!;
        }
    }

    //estafuncion se va e ejecutar de forma asincrona cuando se abra la app
    protected override async Task OnInitializedAsync()
    {
        await CargarContactos();
    }

    //si se envia un request
    public async Task Send()
    {
        //se evalua si tiene un id, es decir, si existe

        //si no
        if (request.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await libroServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
        else //si existe, es decir, si tiene un Id
        {
            //Debo solicitar modificar el contacto...
            var r = await libroServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarContactos();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {

        ShowForm = true;
        request =   Libros
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new LibroRequest();
    }

    public async Task Eliminar(LibroResponse libro)
    {
        var resultado = await libroServices.Eliminar(libro.ToRequest());
        if (resultado.Success)
        {
            await CargarContactos();
            StateHasChanged();
        }
    }
}
