@page "/"

<style>
    .modal-backdrop.fade.show {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-dialog {
        max-width: 500px;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out;
    }

        .card:hover {
            transform: translateY(-2px);
        }
</style>


<div class="text-center">
    <h1 class="display-2 fw-bold">Web Lib</h1>
    <p class="lead fw-bold">Bienvenido</p>
</div>



<div class="alert alert-success rounded-4" role="alert">
    <i class="bi bi-book-fill"></i> 
    <b>    Cantidad de libros almacenados: </b> @Libros.Count
</div>




<div class="input-group mb-3">
    <input @bind-value="busqueda"  type="text" class="form-control form-control-sm rounded-4" style="max-width: 200px;" placeholder="Buscar un libro" aria-label="Recipient's username" aria-describedby="button-addon2">
    <button class="btn btn-success btn-filled-primary bi bi-search ms-2 rounded-circle" type="button" id="button-addon2"></button>
</div>





@if (ShowForm)
{
    <EditForm Model="request" OnValidSubmit="Send">
        <div class="modal-backdrop fade show"></div>

        <div class="modal rounded-pill" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog rounded-pill modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Añadir Un Libro</h5>
                        <button type="button" class="btn-close" @onclick="Cancelar" data-bs-dismiss="modal" aria-label="Close">
                            <span>&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <div class="form-floating mb-4">
                            <input type="text" class="form-control rounded-4" id="floatingInput" @bind="@request.Nombre" placeholder="Nombre del libro">
                            <label for="floatingInput">Nombre del libro</label>
                        </div>

                        <div class="form-floating mb-4">
                            <input type="text" class="form-control rounded-4" id="floatingInput" @bind="@request.Autor" placeholder="Autor del libro">
                            <label for="floatingInput">Autor del libro</label>
                        </div>

                        <div class="input-group mb-3">
                            <label class="input-group-text rounded-start-4" for="inputGroupSelect01">Género literario</label>
                            <select class="form-select rounded-end-4" id="inputGroupSelect01" @bind="@request.Genero">
                                <option selected>Selecciona...</option>
                                <option value="Novela">Novela</option>
                                <option value="Poesía">Poesía</option>
                                <option value="Drama">Drama</option>
                                <option value="Fantasía">Fantasía</option>
                                <option value="Bélico">Bélico</option>
                                <option value="Historia">Historia</option>
                                <option value="Thriller">Thriller</option>
                                <option value="Horror">Horror</option>
                                <option value="Novelas Ligeras">Novelas ligeras</option>
                                <option value="Manga">Manga</option>
                                <option value="Infantil">Infantil</option>
                                <option value="Ciencia/Educativo">Ciencia/Educativo</option>
                                <option value="Ciencia Ficcion">Ciencia Ficción</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="formFile" class="form-label">Seleccionar archivo</label>
                            <InputFile class="form-control rounded-end-4" id="formFile" OnChange="HandleFileChange" />

                           
                        </div>

                        <div class="mb-3">
                            <i class="bi badge-info"></i>
                            <p style="color: #dc3545;" class="fs-10 text-center fw-bold">Procura que las imagenes no sean tan grandes</p>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (Saving)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Libro Guardado</h5>
                    <button type="button" class="btn-close" @onclick="()=>{Saving = !Saving;}"></button>
                </div>
                <div class="modal-body">
                    <p>Se ha guardado el libro @request.Nombre correctamente</p>
                </div>
                <div class="modal-footer text-center">
                    <button type="button" class="btn btn-warning" @onclick="()=>{Saving = !Saving;}">Ok</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="card shadow position-relative rounded-pill">
    <div class="card shadow position-relative rounded-4">
        <button class="btn btn-primary rounded-circle animate__animated animate__fadeIn" @onclick="()=>{ShowForm = !ShowForm;}" style="position: absolute; top: -20px; right: -20px; width: 40px; height: 40px; padding: 0;">
            <i class="bi bi-plus" style="line-height: 40px; font-size: 18px;"></i>
        </button>
    </div>
    <table class="table-light table table-bordered rounded-pill m-0">
        <thead >
            <tr class="table-primary">
                <th class="text-center">Portada</th>
                <th class="text-center">Nombre</th>
                <th class="text-center">Autor</th>
                <th class="text-center">Género</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var libro in Libros.Where(l => l.Nombre.ToLower().Contains(busqueda.ToLower())))
            {
                <tr>
                    <td class="text-center"><img src="data:image;base64,@Convert.ToBase64String(libro.Portada)" class="img-fluid" alt="Portada" style="max-height: 100px;"></td>
                    <td class="text-center">@libro.Nombre</td>
                    <td class="text-center">@libro.Autor</td>
                    <td class="text-center">@libro.Genero</td>
                    <td class="text-center">
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-warning rounded-circle" style="width: 40px; height: 40px; padding: 0; margin-right: 5px;" @onclick="()=>Seleccionar(libro.Id)">
                                <i class="bi bi-pencil-fill" style="line-height: 40px; font-size: 18px;"></i>
                            </button>

                            <button class="btn btn-danger rounded-circle" style="width: 40px; height: 40px; padding: 0;" @onclick="()=>Eliminar(libro)">
                                <i class="bi bi-trash" style="line-height: 40px; font-size: 18px;"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>






@code {

    private string busqueda = "";
    private bool Saving { get; set; } = false;


    public string? LibroExiste { get; set; }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        request.Portada = buffer;
    }

    // Para mostrar el formulario de eliminar
    public bool ShowForm { get; set; } = false;

    // Creamos una lista con todos los libros
    public List<LibroResponse> Libros { get; set; } = new List<LibroResponse>();

    // Creamos una variable de tipo LibroRequest para crear peticiones para almacenar libros
    public LibroRequest request { get; set; } = new LibroRequest();

    // Creamos una variable de filtro
    public string Filtro { get; set; } = "";

    // Para que se cierre el formulario de añadir
    void Cancelar()
    {
        request = new LibroRequest();
        ShowForm = false;
    }

    // Funcion para cargar los libros de manera asincrona (independiente)
    async Task CargarLibros()
    {
        // Ejecutamos la función Consultar la cual devuelve una lista de LibroResponse
        var resultado = await libroServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Libros = resultado.Data!;
        }
    }

    // Esta función se va a ejecutar de forma asincrona cuando se abra la app
    protected override async Task OnInitializedAsync()
    {
        await CargarLibros();
    }

    // Si se envía un request
    public async Task Send()
    {
        // Se evalua si tiene un id, es decir, si existe
        // Si no
        if (request.Id == 0)
        {

            
            // Debo registrar el libro
            var r = await libroServices.Crear(request);
            if (r.Success)
            {
                Saving = true;
                Cancelar();
                await CargarLibros();
                StateHasChanged();
            }
        }
        else // Si existe, es decir, si tiene un Id
        {
            // Debo solicitar modificar el libro
            var r = await libroServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarLibros();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Libros
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new LibroRequest();
    }

    public async Task Eliminar(LibroResponse libro)
    {
        var resultado = await libroServices.Eliminar(libro.ToRequest());
        if (resultado.Success)
        {
            await CargarLibros();
            StateHasChanged();
        }
    }
}
